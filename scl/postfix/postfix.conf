#############################################################################
# Copyright (c) 2021 Balabit
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 as published
# by the Free Software Foundation, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# As an additional exemption you are allowed to compile & link against the
# OpenSSL libraries as published by the OpenSSL project. See the file
# COPYING for details.
#
#############################################################################

block parser postfix-parser (prefix('.postfix.') template("${MESSAGE}")) {
    channel {
        if (match("^[A-F0-9]{10}: ", template(`template`))) {
            # First, extract the message_id from the message
            parser {
                csv-parser(columns("`prefix`message_id", "MESSAGE") delimiters(strings(": ")) template(`template`) flags(greedy));
            };
            # Then split the message parts
            parser {
                kv-parser(prefix(`prefix`) extract-stray-words-into('MESSAGE'));
            };
            # {{{ Reformat fields
            rewrite {
                subst("^<|>$", '', value("`prefix`to") flags("global"));
                subst("^<|>$", '', value("`prefix`from") flags("global"));
                subst("^<|>$", '', value("`prefix`message-id") flags("global"));
            };

            if (match('^([^\[]+)\[([^\]]+)\]$' template("${`prefix`client}") flags('store-matches'))) {
                rewrite {
                    unset(value("`prefix`client"));
                    set("$1", value("`prefix`client.hostname"));
                    set("$2", value("`prefix`client.ip"));
                };
            };

            if (match('^([0-9.]+)/([0-9.]+)/([0-9.]+)/([0-9.]+)$' template("${`prefix`delays}") flags('store-matches'))) {
		rewrite {
			unset(value("`prefix`delays"));
			set("$1", value("`prefix`delays.pdelay"));
			set("$2", value("`prefix`delays.adelay"));
			set("$3", value("`prefix`delays.sdelay"));
			set("$4", value("`prefix`delays.xdelay"));
		};
	    };

            if (match('^([^\[]+)\[([^\]]+)\]:(\d+)$' template("${`prefix`relay}") flags('store-matches'))) {
                rewrite {
                    unset(value("`prefix`relay"));
                    set("$1", value("`prefix`relay.hostname"));
                    set("$2", value("`prefix`relay.ip"));
                    set("$3", value("`prefix`relay.port"));
                };
            };

            if (match('^(.*) \((.*)\)$' template("${`prefix`nrcpt}") flags('store-matches'))) {
                rewrite {
                    set("$1", value("`prefix`nrcpt"));
                    set("$2", value("MESSAGE"));
                };
            };
            if (match('^(.*) \((.*)\)$' template("${`prefix`status}") flags('store-matches'))) {
                rewrite {
                    set("$1", value("`prefix`status"));
                    set("$2", value("MESSAGE"));
                };
            };
            # }}}
        };
    };
};
